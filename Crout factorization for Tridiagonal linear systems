#Crout factorization for Tridiagonal linear systems

# AX = B ko'rinishdagi tenglamalar sistemasini yechish
# A - uch diagonalli matritsa
import numpy as np

def uchdiagonal(a,b,N):
        l = np.zeros((N,N),dtype=float)
        
        u = np.zeros((N,N),dtype=float)
        for i in range(N):
            u[i,i] = 1
       
        v = np.zeros((N),dtype=float)
        x = np.zeros((N),dtype=float)
        
        l[0,0] = a[0,0]
        u[0,1] = a[0,1]/l[0,0]
              
        for i in range(1,N-1):
            l[i,i-1] = a[i,i-1]
            l[i,i] = a[i,i]-u[i-1,i]*l[i,i-1]
            u[i,i+1] = a[i,i+1]/l[i,i]
        
        l[N-1,N-2] = a[N-1,N-2]
        l[N-1,N-1] = a[N-1,N-1]-u[N-2,N-1]*l[N-1,N-2]
                       
        v[0] = b[0]/l[0,0]
        for i in range(1,N):
            v[i] = (b[i]-l[i,i-1]*v[i-1])/l[i,i]
        
        x[N-1] = v[N-1]
        for i in range(N-2,-1,-1):
            x[i] = v[i]-u[i,i+1]*x[i+1]
        
        return x

N = 10

A = np.zeros((N,N),dtype=float)
for i in range(N):
    A[i,i] = 2
for i in range(1,N):    
    A[i,i-1] = -1
    A[i-1,i] = -1


#B = np.array([3,4,0,6],dtype=float)
B = np.zeros((N),dtype=float)
for i in range(1,N-1):
    B[i] = 0
B[0] = 1
B[N-1] = 1


print("A:")
print(A)   
print("B:")
print(B)
yechim = uchdiagonal(A,B,N) 
print("Yechimi:")
print(yechim)
            
