#Crout factorization for Tridiagonal linear systems

# AX = B ko'rinishdagi tenglamalar sistemasini yechish
# A - uch diagonalli matritsa
import numpy as np

def progonka(a,b,N):
        alfa = np.zeros((N),dtype=float)
        beta = np.zeros((N),dtype=float)
        x = np.zeros((N),dtype=float)
        alfa[0] = 1/a[0,0]
        beta[0] = b[0]/a[0,0]
        for i in range(1,N):
            alfa[i] = 1/(2-alfa[i-1])
            beta[i] = (b[i]+beta[i-1])/(2-alfa[i-1])
        
        x[N-1] = (b[N-1]+beta[N-2])/(2-alfa[N-2])
        for i in range(N-2,-1,-1):
            x[i] = alfa[i]*x[i+1]+beta[i]
        
        return x

N = 10


A = np.zeros((N,N),dtype=float)
for i in range(N):
    A[i,i] = 2
for i in range(1,N):    
    A[i,i-1] = -1
    A[i-1,i] = -1
'''

A = np.array([[0.5,0.25,0,0],
              [0.35,0.8,0.4,0],
              [0,0.25,1,0.5],
              [0,0,1,-2]])
B = np.array([0.35,0.77,-0.5,-2.25],dtype=float)
'''

B = np.zeros((N),dtype=float)
for i in range(1,N-1):
    B[i] = 0
B[0] = 1
B[N-1] = 1




print("A:")
print(A)   
print("B:")
print(B)
yechim = progonka(A,B,N) 
print("Yechimi:")
print(yechim)
            
